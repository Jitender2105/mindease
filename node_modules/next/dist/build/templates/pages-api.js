"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    config: null,
    default: null,
    handler: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    config: function() {
        return config;
    },
    // Re-export the handler (should be the default export).
    default: function() {
        return _default;
    },
    handler: function() {
        return handler;
    }
});
const _nodeurl = require("node:url");
const _apiutils = require("../../server/api-utils");
const _routekind = require("../../server/route-kind");
const _modulecompiled = require("../../server/route-modules/pages-api/module.compiled");
const _helpers = require("./helpers");
const _VAR_USERLAND = /*#__PURE__*/ _interop_require_wildcard(require("VAR_USERLAND"));
const _tracer = require("../../server/lib/trace/tracer");
const _constants = require("../../server/lib/trace/constants");
const _instrumentationglobalsexternal = require("../../server/lib/router-utils/instrumentation-globals.external");
const _serverutils = require("../../server/server-utils");
const _constants1 = require("../../api/constants");
const _utils = require("../../shared/lib/router/utils");
const _routerservercontext = require("../../server/lib/router-utils/router-server-context");
const _removepathprefix = require("../../shared/lib/router/utils/remove-path-prefix");
const _normalizelocalepath = require("../../shared/lib/i18n/normalize-locale-path");
const _loadmanifestexternal = require("../../server/load-manifest.external");
const _gethostname = require("../../shared/lib/get-hostname");
const _detectdomainlocale = require("../../shared/lib/i18n/detect-domain-locale");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const _default = (0, _helpers.hoist)(_VAR_USERLAND, 'default');
const config = (0, _helpers.hoist)(_VAR_USERLAND, 'config');
// Create and export the route module that will be consumed.
const routeModule = new _modulecompiled.PagesAPIRouteModule({
    definition: {
        kind: _routekind.RouteKind.PAGES_API,
        page: 'VAR_DEFINITION_PAGE',
        pathname: 'VAR_DEFINITION_PATHNAME',
        // The following aren't used in production.
        bundlePath: '',
        filename: ''
    },
    userland: _VAR_USERLAND
});
async function handler(req, res, ctx) {
    var _routerServerGlobal_RouterServerContextSymbol, _serverUtils_defaultRouteRegex;
    const projectDir = ((_routerServerGlobal_RouterServerContextSymbol = _routerservercontext.routerServerGlobal[_routerservercontext.RouterServerContextSymbol]) == null ? void 0 : _routerServerGlobal_RouterServerContextSymbol.dir) || process.cwd();
    const distDir = process.env.__NEXT_RELATIVE_DIST_DIR || '';
    const isDev = process.env.NODE_ENV === 'development';
    const [routesManifest, prerenderManifest] = await Promise.all([
        (0, _loadmanifestexternal.loadManifestFromRelativePath)(projectDir, distDir, _constants1.ROUTES_MANIFEST),
        (0, _loadmanifestexternal.loadManifestFromRelativePath)(projectDir, distDir, _constants1.PRERENDER_MANIFEST)
    ]);
    let srcPage = 'VAR_DEFINITION_PAGE';
    // turbopack doesn't normalize `/index` in the page name
    // so we need to to process dynamic routes properly
    if (process.env.TURBOPACK) {
        srcPage = srcPage.replace(/\/index$/, '');
    }
    // We need to parse dynamic route params
    // and do URL normalization here.
    // TODO: move this into server-utils for re-use
    const { basePath, i18n, rewrites } = routesManifest;
    if (basePath) {
        req.url = (0, _removepathprefix.removePathPrefix)(req.url || '/', basePath);
    }
    let localeResult;
    if (i18n) {
        const urlParts = (req.url || '/').split('?');
        localeResult = (0, _normalizelocalepath.normalizeLocalePath)(urlParts[0] || '/', i18n.locales);
        if (localeResult.detectedLocale) {
            req.url = `${localeResult.pathname}${urlParts[1] ? `?${urlParts[1]}` : ''}`;
        }
    }
    const parsedUrl = (0, _nodeurl.parse)(req.url || '/', true);
    const pageIsDynamic = (0, _utils.isDynamicRoute)(srcPage);
    const serverUtils = (0, _serverutils.getUtils)({
        page: srcPage,
        i18n,
        basePath,
        rewrites,
        pageIsDynamic,
        trailingSlash: process.env.__NEXT_TRAILING_SLASH,
        caseSensitive: Boolean(routesManifest.caseSensitive)
    });
    const domainLocale = (0, _detectdomainlocale.detectDomainLocale)(i18n == null ? void 0 : i18n.domains, (0, _gethostname.getHostname)(parsedUrl, req.headers), localeResult == null ? void 0 : localeResult.detectedLocale);
    const defaultLocale = (domainLocale == null ? void 0 : domainLocale.defaultLocale) || (i18n == null ? void 0 : i18n.defaultLocale);
    // Ensure parsedUrl.pathname includes locale before processing
    // rewrites or they won't match correctly.
    if (defaultLocale && !(localeResult == null ? void 0 : localeResult.detectedLocale)) {
        parsedUrl.pathname = `/${defaultLocale}${parsedUrl.pathname}`;
    }
    const rewriteParamKeys = Object.keys(serverUtils.handleRewrites(req, parsedUrl));
    serverUtils.normalizeCdnUrl(req, [
        ...rewriteParamKeys,
        ...Object.keys(((_serverUtils_defaultRouteRegex = serverUtils.defaultRouteRegex) == null ? void 0 : _serverUtils_defaultRouteRegex.groups) || {})
    ]);
    const params = serverUtils.dynamicRouteMatcher ? serverUtils.dynamicRouteMatcher((localeResult == null ? void 0 : localeResult.pathname) || parsedUrl.pathname || '') || {} : {};
    const query = {
        ...parsedUrl.query,
        ...params
    };
    serverUtils.normalizeQueryParams(query);
    if (pageIsDynamic) {
        const result = serverUtils.normalizeDynamicRouteParams(query, true);
        if (result.hasValidParams) {
            Object.assign(query, result.params);
        }
    }
    // ensure instrumentation is registered and pass
    // onRequestError below
    await (0, _instrumentationglobalsexternal.ensureInstrumentationRegistered)(projectDir, distDir);
    try {
        const method = req.method || 'GET';
        const tracer = (0, _tracer.getTracer)();
        const activeSpan = tracer.getActiveScopeSpan();
        const invokeRouteModule = async (span)=>routeModule.render(req, res, {
                query,
                params,
                allowedRevalidateHeaderKeys: process.env.__NEXT_ALLOWED_REVALIDATE_HEADERS,
                multiZoneDraftMode: Boolean(process.env.__NEXT_MULTI_ZONE_DRAFT_MODE),
                trustHostHeader: process.env.__NEXT_TRUST_HOST_HEADER,
                // TODO: get this from from runtime env so manifest
                // doesn't need to load
                previewProps: prerenderManifest.preview,
                propagateError: false,
                dev: isDev,
                page: 'VAR_DEFINITION_PAGE',
                onError: (...args)=>(0, _instrumentationglobalsexternal.instrumentationOnRequestError)(projectDir, distDir, ...args)
            }).finally(()=>{
                if (!span) return;
                span.setAttributes({
                    'http.status_code': res.statusCode,
                    'next.rsc': false
                });
                const rootSpanAttributes = tracer.getRootSpanAttributes();
                // We were unable to get attributes, probably OTEL is not enabled
                if (!rootSpanAttributes) {
                    return;
                }
                if (rootSpanAttributes.get('next.span_type') !== _constants.BaseServerSpan.handleRequest) {
                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);
                    return;
                }
                const route = rootSpanAttributes.get('next.route');
                if (route) {
                    const name = `${method} ${route}`;
                    span.setAttributes({
                        'next.route': route,
                        'http.route': route,
                        'next.span_name': name
                    });
                    span.updateName(name);
                } else {
                    span.updateName(`${method} ${req.url}`);
                }
            });
        // TODO: activeSpan code path is for when wrapped by
        // next-server can be removed when this is no longer used
        if (activeSpan) {
            await invokeRouteModule(activeSpan);
        } else {
            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(_constants.BaseServerSpan.handleRequest, {
                    spanName: `${method} ${req.url}`,
                    kind: _tracer.SpanKind.SERVER,
                    attributes: {
                        'http.method': method,
                        'http.target': req.url
                    }
                }, invokeRouteModule));
        }
    } catch (err) {
        // we re-throw in dev to show the error overlay
        if (isDev) {
            throw err;
        }
        // this is technically an invariant as error handling
        // should be done inside of api-resolver onError
        (0, _apiutils.sendError)(res, 500, 'Internal Server Error');
    } finally{
        // We don't allow any waitUntil work in pages API routes currently
        // so if callback is present return with resolved promise since no
        // pending work
        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());
    }
}

//# sourceMappingURL=pages-api.js.map